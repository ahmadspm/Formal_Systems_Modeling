/*
 * generated by Xtext 2.19.0
 */
package org.xtext.sosarch.csdesign.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.sosarch.csdesign.myDsl.Askfordata;
import org.xtext.sosarch.csdesign.myDsl.ConstiuteintsystemDesign;
import org.xtext.sosarch.csdesign.myDsl.Event;
import org.xtext.sosarch.csdesign.myDsl.MyDslPackage;
import org.xtext.sosarch.csdesign.myDsl.Operation;
import org.xtext.sosarch.csdesign.myDsl.Port;
import org.xtext.sosarch.csdesign.myDsl.State;
import org.xtext.sosarch.csdesign.myDsl.StochaticBehavior;
import org.xtext.sosarch.csdesign.myDsl.StochaticConstriants;
import org.xtext.sosarch.csdesign.myDsl.SystemTranstions;
import org.xtext.sosarch.csdesign.myDsl.TellData;
import org.xtext.sosarch.csdesign.myDsl.Transition;
import org.xtext.sosarch.csdesign.myDsl.operations;
import org.xtext.sosarch.csdesign.myDsl.provide;
import org.xtext.sosarch.csdesign.myDsl.rates;
import org.xtext.sosarch.csdesign.myDsl.require;
import org.xtext.sosarch.csdesign.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.ASKFORDATA:
				sequence_Datatoinfer(context, (Askfordata) semanticObject); 
				return; 
			case MyDslPackage.CONSTIUTEINTSYSTEM_DESIGN:
				sequence_ConstiuteintsystemDesign(context, (ConstiuteintsystemDesign) semanticObject); 
				return; 
			case MyDslPackage.EVENT:
				sequence_Event(context, (Event) semanticObject); 
				return; 
			case MyDslPackage.OPERATION:
				sequence_Operation(context, (Operation) semanticObject); 
				return; 
			case MyDslPackage.PORT:
				sequence_Port(context, (Port) semanticObject); 
				return; 
			case MyDslPackage.STATE:
				sequence_State(context, (State) semanticObject); 
				return; 
			case MyDslPackage.STOCHATIC_BEHAVIOR:
				sequence_Stochasticbehavior(context, (StochaticBehavior) semanticObject); 
				return; 
			case MyDslPackage.STOCHATIC_CONSTRIANTS:
				sequence_StochaticConstriants(context, (StochaticConstriants) semanticObject); 
				return; 
			case MyDslPackage.SYSTEM_TRANSTIONS:
				sequence_SystemTranstions(context, (SystemTranstions) semanticObject); 
				return; 
			case MyDslPackage.TELL_DATA:
				sequence_shardata(context, (TellData) semanticObject); 
				return; 
			case MyDslPackage.TRANSITION:
				sequence_Transition(context, (Transition) semanticObject); 
				return; 
			case MyDslPackage.OPERATIONS:
				sequence_Operation(context, (operations) semanticObject); 
				return; 
			case MyDslPackage.PROVIDE:
				sequence_provide(context, (provide) semanticObject); 
				return; 
			case MyDslPackage.RATES:
				sequence_rates(context, (rates) semanticObject); 
				return; 
			case MyDslPackage.REQUIRE:
				sequence_require(context, (require) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ConstiuteintsystemDesign returns ConstiuteintsystemDesign
	 *
	 * Constraint:
	 *     ((actions+=rates action+=rates*)? name=ID ports+=Port*)
	 */
	protected void sequence_ConstiuteintsystemDesign(ISerializationContext context, ConstiuteintsystemDesign semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Datatoinfer returns Askfordata
	 *
	 * Constraint:
	 *     {Askfordata}
	 */
	protected void sequence_Datatoinfer(ISerializationContext context, Askfordata semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Event returns Event
	 *
	 * Constraint:
	 *     (name=ID operation=[Operation|ID])
	 */
	protected void sequence_Event(ISerializationContext context, Event semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.EVENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.EVENT__NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.EVENT__OPERATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.EVENT__OPERATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEventAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getEventAccess().getOperationOperationIDTerminalRuleCall_3_0_1(), semanticObject.eGet(MyDslPackage.Literals.EVENT__OPERATION, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Operation returns Operation
	 *
	 * Constraint:
	 *     recieves+=receive
	 */
	protected void sequence_Operation(ISerializationContext context, Operation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Operation returns operations
	 *
	 * Constraint:
	 *     sends+=send
	 */
	protected void sequence_Operation(ISerializationContext context, operations semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Port returns Port
	 *
	 * Constraint:
	 *     ((name=ID provides+=provide?) | requires+=require)?
	 */
	protected void sequence_Port(ISerializationContext context, Port semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     State returns State
	 *
	 * Constraint:
	 *     (name=ID transitions+=Transition*)
	 */
	protected void sequence_State(ISerializationContext context, State semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Stochasticbehavior returns StochaticBehavior
	 *
	 * Constraint:
	 *     (SystemTransition+=SystemTranstions* ConConstraint+=StochaticConstriants*)
	 */
	protected void sequence_Stochasticbehavior(ISerializationContext context, StochaticBehavior semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StochaticConstriants returns StochaticConstriants
	 *
	 * Constraint:
	 *     ((ConstraintShareDate+=shardata rate+=rates)* (ConstraintData+=Datatoinfer rate+=rates)*)
	 */
	protected void sequence_StochaticConstriants(ISerializationContext context, StochaticConstriants semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemTranstions returns SystemTranstions
	 *
	 * Constraint:
	 *     (name=ID (states+=State | events+=Event)*)
	 */
	protected void sequence_SystemTranstions(ISerializationContext context, SystemTranstions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Transition returns Transition
	 *
	 * Constraint:
	 *     (event=[Event|ID] rate=[rates|ID] target=[State|ID])
	 */
	protected void sequence_Transition(ISerializationContext context, Transition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TRANSITION__EVENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TRANSITION__EVENT));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TRANSITION__RATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TRANSITION__RATE));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TRANSITION__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TRANSITION__TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTransitionAccess().getEventEventIDTerminalRuleCall_0_0_1(), semanticObject.eGet(MyDslPackage.Literals.TRANSITION__EVENT, false));
		feeder.accept(grammarAccess.getTransitionAccess().getRateRatesIDTerminalRuleCall_2_0_1(), semanticObject.eGet(MyDslPackage.Literals.TRANSITION__RATE, false));
		feeder.accept(grammarAccess.getTransitionAccess().getTargetStateIDTerminalRuleCall_4_0_1(), semanticObject.eGet(MyDslPackage.Literals.TRANSITION__TARGET, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     provide returns provide
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_provide(ISerializationContext context, provide semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PROVIDE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PROVIDE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProvideAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     rates returns rates
	 *
	 * Constraint:
	 *     rates=INT
	 */
	protected void sequence_rates(ISerializationContext context, rates semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.RATES__RATES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.RATES__RATES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRatesAccess().getRatesINTTerminalRuleCall_1_0(), semanticObject.getRates());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     require returns require
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_require(ISerializationContext context, require semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.REQUIRE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.REQUIRE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRequireAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     shardata returns TellData
	 *
	 * Constraint:
	 *     {TellData}
	 */
	protected void sequence_shardata(ISerializationContext context, TellData semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
