/*
 * generated by Xtext 2.19.0
 */
package org.xtext.behavior.withstatemachine.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class StatemachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behavior.withstatemachine.MyDSL.Statemachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMachineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cEventsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEventsEventParserRuleCall_2_0 = (RuleCall)cEventsAssignment_2.eContents().get(0);
		private final Assignment cStatesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatesStateParserRuleCall_3_0 = (RuleCall)cStatesAssignment_3.eContents().get(0);
		
		//Statemachine:
		//	'machine' name=ID events+=Event* states+=State*;
		@Override public ParserRule getRule() { return rule; }
		
		//'machine' name=ID events+=Event* states+=State*
		public Group getGroup() { return cGroup; }
		
		//'machine'
		public Keyword getMachineKeyword_0() { return cMachineKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//events+=Event*
		public Assignment getEventsAssignment_2() { return cEventsAssignment_2; }
		
		//Event
		public RuleCall getEventsEventParserRuleCall_2_0() { return cEventsEventParserRuleCall_2_0; }
		
		//states+=State*
		public Assignment getStatesAssignment_3() { return cStatesAssignment_3; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_3_0() { return cStatesStateParserRuleCall_3_0; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behavior.withstatemachine.MyDSL.Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cEvenratesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEvenratesRateParserRuleCall_2_0 = (RuleCall)cEvenratesAssignment_2.eContents().get(0);
		
		//Event:
		//	'event' name=ID evenrates+=Rate*;
		@Override public ParserRule getRule() { return rule; }
		
		//'event' name=ID evenrates+=Rate*
		public Group getGroup() { return cGroup; }
		
		//'event'
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//evenrates+=Rate*
		public Assignment getEvenratesAssignment_2() { return cEvenratesAssignment_2; }
		
		//Rate
		public RuleCall getEvenratesRateParserRuleCall_2_0() { return cEvenratesRateParserRuleCall_2_0; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behavior.withstatemachine.MyDSL.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTransitionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTransitionsTransitionsParserRuleCall_2_0 = (RuleCall)cTransitionsAssignment_2.eContents().get(0);
		
		//State:
		//	'state' name=ID transitions+=Transitions*;
		@Override public ParserRule getRule() { return rule; }
		
		//'state' name=ID transitions+=Transitions*
		public Group getGroup() { return cGroup; }
		
		//'state'
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//transitions+=Transitions*
		public Assignment getTransitionsAssignment_2() { return cTransitionsAssignment_2; }
		
		//Transitions
		public RuleCall getTransitionsTransitionsParserRuleCall_2_0() { return cTransitionsTransitionsParserRuleCall_2_0; }
	}
	public class RateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behavior.withstatemachine.MyDSL.Rate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventrateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventvalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventvalINTTerminalRuleCall_1_0 = (RuleCall)cEventvalAssignment_1.eContents().get(0);
		
		//Rate: //'eventrate' value=INT'.'INT
		//	'eventrate' eventval=INT;
		@Override public ParserRule getRule() { return rule; }
		
		////'eventrate' value=INT'.'INT
		//'eventrate' eventval=INT
		public Group getGroup() { return cGroup; }
		
		////'eventrate' value=INT'.'INT
		//'eventrate'
		public Keyword getEventrateKeyword_0() { return cEventrateKeyword_0; }
		
		//eventval=INT
		public Assignment getEventvalAssignment_1() { return cEventvalAssignment_1; }
		
		//INT
		public RuleCall getEventvalINTTerminalRuleCall_1_0() { return cEventvalINTTerminalRuleCall_1_0; }
	}
	public class TransitionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behavior.withstatemachine.MyDSL.Transitions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEventAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cEventEventCrossReference_0_0 = (CrossReference)cEventAssignment_0.eContents().get(0);
		private final RuleCall cEventEventIDTerminalRuleCall_0_0_1 = (RuleCall)cEventEventCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEventratesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cEventratesRateCrossReference_2_0 = (CrossReference)cEventratesAssignment_2.eContents().get(0);
		private final RuleCall cEventratesRateIDTerminalRuleCall_2_0_1 = (RuleCall)cEventratesRateCrossReference_2_0.eContents().get(1);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetStateCrossReference_4_0 = (CrossReference)cTargetAssignment_4.eContents().get(0);
		private final RuleCall cTargetStateIDTerminalRuleCall_4_0_1 = (RuleCall)cTargetStateCrossReference_4_0.eContents().get(1);
		
		//Transitions:
		//	event=[Event] '.' eventrates=[Rate] 'to' target=[State];
		@Override public ParserRule getRule() { return rule; }
		
		//event=[Event] '.' eventrates=[Rate] 'to' target=[State]
		public Group getGroup() { return cGroup; }
		
		//event=[Event]
		public Assignment getEventAssignment_0() { return cEventAssignment_0; }
		
		//[Event]
		public CrossReference getEventEventCrossReference_0_0() { return cEventEventCrossReference_0_0; }
		
		//ID
		public RuleCall getEventEventIDTerminalRuleCall_0_0_1() { return cEventEventIDTerminalRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//eventrates=[Rate]
		public Assignment getEventratesAssignment_2() { return cEventratesAssignment_2; }
		
		//[Rate]
		public CrossReference getEventratesRateCrossReference_2_0() { return cEventratesRateCrossReference_2_0; }
		
		//ID
		public RuleCall getEventratesRateIDTerminalRuleCall_2_0_1() { return cEventratesRateIDTerminalRuleCall_2_0_1; }
		
		//'to'
		public Keyword getToKeyword_3() { return cToKeyword_3; }
		
		//target=[State]
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }
		
		//[State]
		public CrossReference getTargetStateCrossReference_4_0() { return cTargetStateCrossReference_4_0; }
		
		//ID
		public RuleCall getTargetStateIDTerminalRuleCall_4_0_1() { return cTargetStateIDTerminalRuleCall_4_0_1; }
	}
	
	
	private final StatemachineElements pStatemachine;
	private final EventElements pEvent;
	private final StateElements pState;
	private final RateElements pRate;
	private final TransitionsElements pTransitions;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pStatemachine = new StatemachineElements();
		this.pEvent = new EventElements();
		this.pState = new StateElements();
		this.pRate = new RateElements();
		this.pTransitions = new TransitionsElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.behavior.withstatemachine.MyDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Statemachine:
	//	'machine' name=ID events+=Event* states+=State*;
	public StatemachineElements getStatemachineAccess() {
		return pStatemachine;
	}
	
	public ParserRule getStatemachineRule() {
		return getStatemachineAccess().getRule();
	}
	
	//Event:
	//	'event' name=ID evenrates+=Rate*;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//State:
	//	'state' name=ID transitions+=Transitions*;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//Rate: //'eventrate' value=INT'.'INT
	//	'eventrate' eventval=INT;
	public RateElements getRateAccess() {
		return pRate;
	}
	
	public ParserRule getRateRule() {
		return getRateAccess().getRule();
	}
	
	//Transitions:
	//	event=[Event] '.' eventrates=[Rate] 'to' target=[State];
	public TransitionsElements getTransitionsAccess() {
		return pTransitions;
	}
	
	public ParserRule getTransitionsRule() {
		return getTransitionsAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
