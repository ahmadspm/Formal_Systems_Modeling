/**
 * generated by Xtext 2.19.0
 */
package org.xtext.behavior.withstatemachine.myDSL.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.behavior.withstatemachine.myDSL.MyDSLPackage;
import org.xtext.behavior.withstatemachine.myDSL.Rate;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Rate</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.behavior.withstatemachine.myDSL.impl.RateImpl#getEventval <em>Eventval</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RateImpl extends MinimalEObjectImpl.Container implements Rate
{
  /**
   * The default value of the '{@link #getEventval() <em>Eventval</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEventval()
   * @generated
   * @ordered
   */
  protected static final int EVENTVAL_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getEventval() <em>Eventval</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEventval()
   * @generated
   * @ordered
   */
  protected int eventval = EVENTVAL_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RateImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDSLPackage.Literals.RATE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getEventval()
  {
    return eventval;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEventval(int newEventval)
  {
    int oldEventval = eventval;
    eventval = newEventval;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDSLPackage.RATE__EVENTVAL, oldEventval, eventval));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDSLPackage.RATE__EVENTVAL:
        return getEventval();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDSLPackage.RATE__EVENTVAL:
        setEventval((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDSLPackage.RATE__EVENTVAL:
        setEventval(EVENTVAL_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDSLPackage.RATE__EVENTVAL:
        return eventval != EVENTVAL_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (eventval: ");
    result.append(eventval);
    result.append(')');
    return result.toString();
  }

} //RateImpl
